# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift (iOS)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SCHEME: CrewClock             # <-- change if your scheme name is different
  PROJECT_PATH: CrewClock.xcodeproj  # your .xcodeproj in repo root

jobs:
  build-and-test:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.*"

      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: List schemes (sanity check)
        run: |
          xcodebuild -list -json -project "$PROJECT_PATH" || true

      - name: Build + Test (Simulator)
        shell: bash
        env:
          DEST: "platform=iOS Simulator,name=iPhone 16"  # from your runner’s list
        run: |
          set -e
          echo "Building $SCHEME from $PROJECT_PATH on $DEST"
          if xcodebuild \
                -project "$PROJECT_PATH" \
                -scheme "$SCHEME" \
                -configuration Debug \
                -destination "$DEST" \
                CODE_SIGNING_ALLOWED=NO \
                clean build test; then
            echo "Build + test succeeded."
          else
            echo "Tests failed or not configured; building only…"
            xcodebuild \
                -project "$PROJECT_PATH" \
                -scheme "$SCHEME" \
                -configuration Debug \
                -destination "$DEST" \
                CODE_SIGNING_ALLOWED=NO \
                clean build
          fi
